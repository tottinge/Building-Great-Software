A Bunch Of Machines
===================
Tim Ottinger
v0.1 2011
:doctype: book


Think About Programming
-----------------------

Before we can start programming, we have to think about programming and
programs. If you can think the right way about it, you'll have an advantage
over all the other programmers who learned the basic mechanics but don't really
understand it. footnote:[there are a lot of people who program for a living but
don't really understand what they do. It's very sad.]

Programs are everything that make a computer work, from Windows and Linux and
OS/X (which are basically programs that run other programs), to console games,
to the great Google search engine, to incredible photo-editing programs, word
processors, and online shopping carts.

Programs and hardware have a lot in common. Both of them are things that take
some kind of action such as a mouse movement, and respond by causing something
else to happen. Pressing a button on your video screen may cause it to get
brighter or darker. Typing into an email program may cause it to send a note
across the internet. 

In other words, it's all "machines."  Hardware is a bunch of physical
machines, from resistors to wires to capacitors and springs and buttons.
Software is also a machine, but it's made out of something different. In
this book, you will learn about software parts and how to make machines of
them.

What would you think of a new car made out of duct tape, paperclips, and
chewing gum? It might be pretty cool to actually produce a car that way, but
would you take it out on the highway? Machines can be made well, or can be
made poorly. If we set out to build a machine poorly, it's a hobby or an
experiment.  These are good things! You should be able to make something
well, poorly, or semi-well, and you should enjoy doing it. If the work is
important and you want to be paid or you want people to use the software you
build, you will need to build it well. Don't be surprised that not all
software is built well.

Be warned, you won't be creating any 3D shooters in this book [well, maybe
not], but you will learn the essentials of computer programming. Knowing the
basics will allow you to move to more and more fancy programming machines,
and you may eventually build a 3D shooter, or a spaceship guidance system,
or a web page. 

Also be warned, the topic is sometimes fascinating and exciting, but
sometimes you'll not feel like doing the work. That's pretty normal.
Developing your ability to concentrate and do work until it is exciting
again is a part of learning to program. Also, a programmer has to learn to
stop sometimes and give it a rest. You will learn when to push and when to
rest. 

One Little Machine
------------------
We are going to start with a programming tool called Python. The people who
make python make it because they like it, not because they want to sell it
and get rich.  You can go to http:python.org[the Python web page] and get
python.  It's really easy to install python, it's usually just a download
footnote:[if you use Ubuntu, you can use the software center]. 

********
'Why don't you tell me how to install Python?'


Installation is done differently depending on your operating system, and the
web sites for programming languages already have installation instructions. 
We think those instructions are usually quite good.

Besides, installers change over time. Even if we told you how to do it in
this book, you would have to check the web site to see if it is still done
that way.
********

Once you have python installed, you need to start it. The web page gives you
instructions. You might use a menu and click "python" and "idle", or you
might go to a command line and type "python." Try it both ways, if you like.

Eventually you will get a prompt that looks something like this:
[source,bash]
    Python 2.7.1+ (r271:86832, Apr 11 2011, 18:05:24) 
    [GCC 4.5.2] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    >>> 

The version numbers and operating system version might be different, don't
let that bother you.

You can now start to play with some little machines. The first is something 
called a 'string,' which is short for 'text string.' A string is some.
letters, spaces, numbers or other text things you can type. In a string,
they are all stuck together inside quotes:

[source,python]
    >>> "hello"
    'hello'

Here we typed +"hello"+ (including the quotes) and python gave us back the 
result, which is a string with the value +'hello'+ (don't worry about the
different quotes for now). I know that doesn't seem like much of a machine,
but it is. You can ask it to do things and it will do them.

[source,python]
    >>> "hello" + ", you"
    'hello, you'
    >>> 

Here we did the same things as last time, but we told the string with
"hello" in it to add a comma and the word 'you'. It did, and returned
a new machine, which is a string with the value "hello, you." 

Python (which is also a machine) responded by printing +'hello you'+.

The plus command above is called an "infix operator" which is a fancy
way of saying that it is a command that sits between the two pieces
of data it works on. Here are a few more "infix operators"

[source,python]
    >>> 1 + 1
    2
    >>> 2*5
    10
    >>> "a" * 4
    'aaaa'

That last one is a bit of a surprise; who would have thought you could
multiply a string? Sure enough, 'a * 4' is 'aaaa.' 

The string is a kind of machine that can obey a large set of commands.
To give it a command, you have to know the name of the command and
type it after a period. Imagine you're talking to the string, and 
you say "string, change yourself to uppercase."  The dot between the
string you're talking to and the command is a lot like the comma in
the above sentence.  

Let's look at a few examples:

[source,python]
    >>> "hello".upper()
    'HELLO'

The string can also convert itself to lower-case:

[source,python]
    >>> "HELLO".lower()
    'hello'

It has some fancy abilities, like capitalizing the first letter of every
word:

[source,python]
    >>> "hello".title()
    'Hello'

We can have it print itself at the right-end of a string, which we call
"right-justified".  Let's right-justify a string in a 40-letter string:

[source,python]
    >>> "hello".rjust(40)
    '                                   hello'

There's no reason to stop there, because we can also left-justify the
string.

[source,python]
    >>> "hello".ljust(40)
    'hello                                   '

We can also have it replace letters with other letters. Let's try replacing
the lower-case 'h' at the beginning with an upper-case H:

[source,python]
    >>> "hello".replace("h","H")
    'Hello'

Of course that looks too easy because it's at the beginning of the word. 
How about we replace all of the lower-case L letters with capital letters?

[source,python]
    >>> "hello".replace("l","L")
    'heLLo'

We can also ask the string questions. Let's ask it how many lower-case 
L letters it has:

[source,python]
    >>> "hello".count('l')
    2
    >>> 

All of the abilities are built-in to the string. It's just the kind of
machine it is. footnote:[Advanced students can find out what a string can
do by typing <code>dir("hello")</code>] Somebody cleverly added these
commands when they designed the software machine we call a 'string'.

Here is a good place for some terminology. A type of machine is a class. 
Programmers would say that "hello" has the string 'class', or that it is
a thing of 'class string'.  

Notice that the string doesn't draw butterflies on the screen, or turn off the
computer or add numbers together. It only does "string stuff." It is important
that each machine we make has commands that make sense together. It is just like at
your house, where you turn on the television to watch a show, but turn on the
blender to make a milkshake. You use the refrigerator to make things cold, and
the stove to make them hot. It is an important law of machines that they have
only one job to do. 

We call the idea that an idea has only one idea "cohesion." Cohesion implies
all things going in the same direction. That's the right idea. A famous
programmer named Bertrand Meyer once said of a software class that it "Has one
responsibility: it does it all, does it well, and does it only."

Imagine if your real-world items didn't have cohesion in this sense: your
refrigerator would hammer nails, and you would have to start your car to chill
soda pop. Crazy, right?  With cohesion, you always know where to look when you
want a certain job done. If you want to work with some text, you can pretty
much count on the idea that you'll use a string.

Did you notice that we got the value of 2 when we asked how many copies of
letter L were in "hello?"  We know that 2 is a number, but did you know that 2
is also a machine? It is a machine of type "integer."

[source,python]
    >> 2+2
    4
    >> 2*4
    8

These examples don't use the "." to issue commands, and that's almost a shame.
But the + for addition and the * for multiplication are performed by the
integer class. These types of commands are a little different, because they
don't use the dot notation. 

The integers don't actually have methods named "add" and "times", but they do have 
special functions named __add__ and __mul__. You could actually use them, but
python added the + and * as a convenience.
 
It is as if you could write this:

`Will not actually work, we'll show you a way that does soon.`
[source,python]
   >> 2.__add__(2) 
   4
   >> 2.__mul__(4)
   8
   >> 


You don't have to like the names "__mul__" and "__add__" in order to use
them.  The people who made python decided that this is how they would make
their number types. As long as they do what you want, you can tolerate a
little strangeness.

So strings are little machines and numbers are little machines. Already
we could put them together and do very simple jobs. For instance, if we
know the operators for integers, we can use python as a calculator!

Naming Data With Variables
--------------------------

The problem with the code above is that we had to type "hello" every time we
wanted the string that contains the value "hello." What we need is some way
to hold onto the "hello" string and talk about it. Indeed we can. We can
make up a name and assign the value "hello" to that name.  

This is a little confusing, though. The command we use to give a name to a
value is the equals sign (=). All of our lives, we have seen the equal sign
used to state a fact. For instance: 2+2 = 4. We have to rework our brain a
bit to understand that many programming languages do it differently. Some
are more reasonable-seeming than others:

[source,vbscript]
   let x = 3;   <-- BASIC
[source,pascal]
   int x := 3;  <-- Pascal
[source,bash]
   set x=3  <---bash
[source,c]
   int x = 3; <-- C 

In python, it's pretty simple-looking: 

[source,python]
   x = 3

Remember that this little bit of programming is not stating a fact, but 
issuing a command to attach the name "x" to the value of 3. Most of the
time in programming, we don't state facts. We are always telling the 
computer to do something or tell us something.

In python a name is attached to a value, but you can attach it to any
other value you like.

[source,python]
   >> x=3
   >> x="elephant"
   >> x=23.4
   >> x=33*2.33

When we typed 2 or 3 or "hello", python would tell us the value. In 
the example above, it didn't tell us anything. That is because the 
value of 3 was "captured" by the name "x" and there was nothing 
interesting to print on the screen. If you typed "x" on a line by
itself after the last line above, it would say 76.890000000000001
or something very close to it, which is roughly the value of 33
times 2.33. That's close enough to being true that we're not 
worried about it (for now).

We refer to these names for values as "variable" because we can
change what the name points at. It varies, so we call it a variable.

Generally we don't call things X very often, because it doesn't mean
much to us. When we use names later in this book we will use longer
names that mean something to us and which will help people reading
our programs to understand them.

Just for fun we can print a popular myth like this:

[source,python]
   >> print "George Washington has wooden teeth."
   George Washington has wooden teeth.

Print is a special command that tells python (remember python is a machine
too) to show a message on the screen. It isn't very exciting, but it tells
you that you now have new ways to interact with your machine.

Let's step it up to use a single variable:
[source,python]
   >> a = "George Washington has wooden teeth."
   >> print a
   'George Washington has wooden teeth'

We can always check the value of a variable this way. When we get a 
lot of variables, we might sometimes not be sure of one or two of them,
and printing them to the screen is a time-honored way to find out.
Let's try something slightly more advanced:

[source,python]
   >>> a = "George Washington"
   >>> b = "wooden"
   >>> c = "teeth"
   >>> print a  + " has " + b + " " + c + "."
   George Washington has wooden teeth.

Now we see that the print line is a kind of machine that assembles
words into a sentence. That's almost exciting!  

Of course, the variable names are pretty awful. You have to have a 
codebook in your head that says "a stands for George Washington",
"b stands for wooden", and "c stands for teeth."  That's sort of fun
at first, but eventually becomes a real pain in the neck.

Instead, Python allows us to use real names and real words. They have
to start with a letter and contain letters and numbers footnote:[this is mostly true, but not complete]
and maybe the underbar character ("_") to separate words. Names can
be quite long.  Instead of the gibberish names above, we could write
the same thing like this:

[source,python]
   >>> name = "George Washington"
   >>> material = "wooden"
   >>> parts = "teeth"
   >>> print name  + " has " + material + " " + parts + "."
   George Washington has wooden teeth.

Now we can make some changes and print again:
[source,python]
   >>> parts="feet"
   >>> material ="clay"
   >>> print name + " has " + material + " " + parts + "."
   George Washington has clay feet.

Notice how much more obvious it is when we use real names for our data.
That is an important fact that many programmers, even professionals, do
not consider strongly enough.

Writing Functions
-----------------

We would like to stop typing the print line over and over again. Wouldn't
it be cool if we could turn it into a little command with a nice short name?
I think I would like to be able to say something like:
[source,python]
   >> speak_about("George Washington", "wooden", "teeth")
   'George Washington has wooden teeth.'

Then I can give it different values for materials, names, and body parts and
it would do assemble the sentence the same way regardless of what I told it.

We can do that. Python lets us define something called a 'function' which 
will take data and do something with it.
[source,python]
   >>> def speak_of(name, material, parts):
   ...    print name + " has " + material + " " + parts + "."
   ...
   >>>

There are some new things to explain here. The first is the word "def", 
which means we are going to define a new function. 

Next comes the name we want the function to have ("speak_of"), and then
in parenthesis we say what variable names we want to give its data. We
will pass three variables, with the names "name", "material", and "parts." 
Next comes a colon. 

After the colon we have indented some more instructions to python. 
The indented part is called a "block" or if you like "block of code."
When python expects an indented block of code, it prints dots instead
of greater-than signs in order to help you understand what you should
do next. 

Our block only has one instruction, but a block could have more.
If the block of code was not indented or marked in some special way,
how would python know when you are finished with it? All programming 
languages use special syntax to show which instructions are part of
the block, and python uses indentation. As long as all of the lines
have the same indentation, it doesn't matter if you use one space,
ten spaces, a tab, five tabs... consistency is all that matters. 
I used three spaces. As long as we indent the same way, prefixing 
three spaces, python knows we're still putting in instructions for 
"speak_of."

You can think of the indented block with the print statement as being connected
to the speak_of name by the colon operator. 

When I'm done with the print line, I get three dots again. I don't have
any more programming to do, so I just hit enter instead of typing more 
instructions into the block. The dots go away. Python answers with three 
greater-than signs, just like it usually does. 

Let's give it a try:
[source,python]
   >>> speak_of("Harry","hairy", "feet")
   Harry has hairy feet.
   >> speak_of("Judy", "golden", "hair")
   Judy has golden hair.
   >> speak_of("Pirates","wooden","legs")
   Pirates has wooden legs

The grammar is awful on that last one, but it works like we told it
to.  Programs don't figure things out, they just follow instructions.
This is why programs often have problem. 

In our case, though, it is not as exciting as we would like. It would be more
fun if there was a way to have it build different sentences out of lists of
different words. It might be more fun yet if it could pick the words randomly. 

In other words, it would be fun to make a machine that spouts
gibberish.



A Gibberish Machine
-------------------

We have lists in python. They are machines that
hold a bunch of values and can give us one or several of them at a time.
It's pretty cool stuff. Python is just full of little machines like
these that we can use to build more interesting machines.

This is going to get wild and wooly, so try to type the examples
and understand them as we go along:

[source,python]
   >>> names = ["tim","jeff","Elvis","Freddie","King James","Nick","You"]

We assign the name "names" to a list of strings. You can tell it is a list because
it is wrapped in square brackets and the items are separated with commas.
That's how python makes lists. Other languages may do it very differently.

We can ask questions about the lists. We can ask the length of the list, for
example: 

[source,python]
   >>> len(names)
   7

Seven looks right. We should be able to get the first name from the list. We
can use a special syntax called a subscript operator to find the first item
in name. We use square brackets for subscripting, just like we did for the list
creation, but we can tell that we are looking into a list because the word before
the first square bracket is not the equal sign but list.

[source,python]
   >>> names[1]
   'jeff'

Uh, oh. That doesn't look right. When we created the list, the first name was 
"tim", so we've done something wrong. If we type "print list", though, we see 
that we still have "tim" in front. Weird, huh? 

The reason is important: computer programmers count from zero, not one. It is
a historical thing but it's pretty normal. So the item at position one is the
item one place from the start. We want the item at position 0.

[source,python]
   >>> names[0]
   'tim'

Okay, that's what we expected. Counting from zero works better.

There is also another way to get data from the array. There is a command called
"pop" which removes one list element and returns it. Let's see if we can grab the first one:

[source,python]
   >>> names = ["tim","jeff","Elvis","Freddie","King James","Nick","You"]
   >>> names.pop()
   'You'

That doesn't seem to have worked. When you get an error in programming, you
might have the urge to just try it again, or throw up your hands in disgust.
Since programming is all about learning and building, a better approach is to
see what actually happened and try to understand it.

In this case, what happened was that we got the last element instead of 
the first. When we look at the python documentation, we see that it is the
right thing for a list to do, we just didn't understand what pop() would 
do. We also will find out that we can tell pop() which item to pull. If
we want the first one, we remember that programmers count from zero and
ask for list item zero:

[source,python]
   >>> names.pop(0)
   'tim'
  
Ah, now that's what we want. Now we have a simple procedure for solving
problems. You always try to figure out what really happened and check the
documentation. Is it doing what it is supposed to do? Did our instructions have
an error in them? After all, a program is a machine so it always does what it
was told to do, but sometimes we don't always tell it to do the right things.

In this case, the author misled you. We said that pop() would get the first 
item, and it does not. Usually you will come to misunderstandings on your own,
and these misunderstandings will come up as errors. Errors are not desirable,
but you have to have them if you are to learn. Programmers have learned a
whole bunch of tricks to keep from misunderstanding code, and to make sure
that they find out quickly when they make a mistake. We'll teach these tricks
as we go along.

The first trick is one you're already doing: read books, try things out, and
concentrate on learning instead of being perfect.

Remember, when we got the last name instead of the first one, the earth did not
implode and nobody got hurt. The program just did not work. This is how most
errors turn out. There have been bugs that hurt people or cost money, but we're
not going to make those here. 

The List Walker
===============

Now we can create lists, and we can use them. One way to make our gibberish
generator is to create a list of names, a list of adjectives, and a list of
body parts footnote:[keep it clean, kids]

[source, python]
    >>>names = [ "Tim", "Jeff", "Bob"]
    >>>adjectives = ["huge", "tiny", "hairy"]
    >>>parts = [ "feet", "ears", "arms"]
    >>> speak_of(names[0], adjectives[0], parts[0]
    'Tim has huge feet."

Okay, that's the right idea. Now we need to figure out how to get all of
the words to be used. We've cleverly matched the number of parts, adjectives,
and names (all are 3) so we need some way to do all the zeroes, then the
ones, then the twos.  This way is no fun:

[source, python]
   >>> speak_of(names[0], adjectives[0], parts[0]
   'Tim has huge feet."
   >>> speak_of(names[1], adjectives[1], parts[1]
   'Jeff has tiny ears."
   >>> speak_of(names[2], adjectives[2], parts[2]
   'Bob has hairy arms."


It works, and we could leave our program this way, but that would not
teach us anything new.  Besides, it is quite boring to repeat the same
code and retype the numbers each time.  It is worse than boring! Most
professional programmers consider repeating code (even with small changes)
to be a crime against programming!footnote[as do we]

If we had a variable we could keep from repeating the numbers in each
line:

[source, python]
   >>> x = 0
   >>> speak_of(names[x], adjectives[x], parts[x]
   'Tim has huge feet."
   >>> x = 1
   >>> speak_of(names[x], adjectives[x], parts[x]
   'Jeff has tiny ears."
   >> x = 2
   >>> speak_of(names[x], adjectives[x], parts[x]
   'Bob has hairy arms."

That keeps us from repeating inside the line, but now we have to 
do more work for each printed phrase. While the variable made some
things easier it made others harder.  If anything, it made the code
even more duplicate than before!

Python provides us with a special machine to help us out. It is called
a loop. It repeats some code over and over. A very nice kind of machine 
is the "for" loop.


[source, python]
----
   >> for x in [0,1,2]:
   ...    speak_of(names[x], adjectives[x], parts[x])
   ...
   'Tim has huge feet."
   'Jeff has tiny ears."
   'Bob has hairy arms."
----
   

What the "for" loop does is set x to each of the values in the number list
[0,1,2] in turn, and after setting x each time it does the work that is 
indented after the colon (:) mark.  In our case, it is just the ~speak_of~ 
command.  It is a very simple idea, and it works just great. 

Any time you need to walk through a list, you might consider using a ~for~ loop.
There are several kinds of loops in python, but this one is the one you will use
most.


Being Unpredictable
===================

This was fun and we got to learn more about lists and loops, but the output is
rather predictable. It would be more fun if we could make the program choose
parts at random footnote[as far as we can tell it is random] to provide comic
effects.

Programmers can build their own machines, rather than simply relying upon the
various machines built by python and installed in the language like loops, 
lists, strings, and numbers. One very smart programmer made a random chooser
for us.  He put his little machine in a file called "random" somewhere
in the computer.

[source, python]
   >>> import random
   >>> random.choice(names)
   'Bob'

If you do the same thing I just did, it probably didn't say Bob, but might
have said 'Tim' or 'Jeff' instead.  If I do the same thing over and over,
I might get different answers each time.


[source, python]
   >>> random.choice(names)
   'Tim'
   >>> random.choice(names)
   'Jeff'
   >>> random.choice(names)
   'Jeff'
   >>> random.choice(names)
   'Bob'
   >>> random.choice(names)
   'Tim'

Note that it can repeat the same name or a different name. It's random! footnote[random-ish] 

How does the random machine's choice command know how big the list is? That's easy! The list
is a machine that knows its length and reports it if you give it a special python command:

[source, python]
    >>> len(names)
    3

The choice command doesn't have to know anything, it can just ask. It specializes in picking
a number within the size of the list and returning the list element just as if it had
been written this way:

[source, python]
      def choice(some_list):
          chosen = some_number_less_than( len(some_list) )
          return some_list[chosen]

All of the magic is in the part we called "some_number_less_than" above. How it works is
a matter for the mathematically inclined among us, the rest can be happy that the machine is
well-tested and works just fine. 

Now we can rewrite our loop!
[source, python]
   >>> for x in [0,1,2]:
   ...    speak_of(random.choice(names), random.choice(adjectives), random.choice(parts))
   ...

   Jeff has hairy ears.
   Jeff has tiny feet.
   Bob has huge feet.

Notice that your results may vary from mine. 

There is a lot going on in this little example. Here I've rewritten it as one 
organized set of program statements:

[source, python]
----
import random

names = [ "Tim", "Jeff", "Bob"]
adjectives = ["huge", "tiny", "hairy"]
parts = [ "feet", "ears", "arms"]

def speak_of(name, material, parts):
    print name + " has " + material + " " + parts + "."

for x in [0,1,3]:
    speak_of(random.choice(names), random.choice(adjectives), random.choice(parts))
----


 * We have imported something called random, which has a command called 'choice'.  Python programmers
   usually put import statements at the top of the file.

 * We have lists for names, adjectives, and parts. Python programmers often define data near the top
   of a file, but the only important thing is that we define the data before we use it.

 * We assigned the name "speak_of" to a block of code.  

 * speak_of will assign new names to the three variables we pass to it temporarily. We don't even
   really know which strings we'll give it, but we know there will be three and the function will
   call them "name", "material", and "part."

 * speak_of will also build a new string by sticking known strings together in a predictable order, and
   it will print the new string.

 * We built a for loop that assigns each of the numbers from a list in turn to the variable 'x'. 

 * The loop ends in a colon because it is a control, and code under it is indented
   because it is a block.

 * The loop's block will call speak_of, passing a randomly chosen name as "name", a randomly-chosen adjective as "material",
and a randomly-chosen part as "parts."

 * Each time we run the program it might produce different results.

Our gibberish program was fun and illustrated a lot of concepts. You saw it using lists and strings and numbers, 
infix operators (=,+), functions (choice, speak_of), and global commands (len, print). We have already used
import to bring in code that other people wrote.

That sounds like an awful lot of things to learn about in one chapter, but the important fact underneath it all is that this programming work
is all about assembling machines by assembling other machines. Knowing what machines are available and what they can do will help us to 
expand our awesome powers of programming. 


Programs that stay around
-------------------------

When professional python programmers write programs, they certainly could write
the code in the python prompt like we did if their programs were all very small
and simple. Programs used to run businesses are not very small or very simple.
Mistakes made when typing the program could cause people to make large financial
errors.  

Instead, programs are in a massive collection of files containing many programs
like the ones above. There are a lot of 'little machines' for doing accounting, 
creating web pages, controlling machines, communicating over networks, drawing
game graphics, generating reports, and storing massive amounts of data.  

In every programming language, there is some way to organize big programs. 

We've already learned to collect code into functions, and we know that there
are such things as classes. Now it's time to start dealing with files and
modules.

You are going to need some kind of text editor. You probably have something
like windows 'notepad', 'gedit' or 'nano' on linux, 'textedit' on mac, or you
might have something really cool like scite or idle or vim or emacs or eclipse.
Some of these are very easy to use, some are harder to learn but can do a lot
more stuff. Many programmers know how to use several editors.

You will not want to use a word processor like 'Word(tm)' or 'LibreOffice' 
because they create files with all kinds of information about font sizes and
type faces and formatting that makes documents look really great. A text editor
does none of that because programming languages don't handle all the formatting.
Maybe it would be cool if you could write your programs using a word processor,
so you could make different colored text and bold, italic, or oversized 
text... but that's really now how it works. For now we can ignore all of that
and work in our text editors.

There are text editors that are written specifically for writing python programs.
DrPython, SPE,  [a few others] can do that, and you probably also have idle
installed.  We're not going to teach you how to use the editor in this book.
Your editor probably has help files and online tutorials to make it easy to
use. Whatever you don't understand, you might not need yet.

I will call your editor EDITOR.  If I say this:

[source, bash]
    > EDITOR junk.py

You would not type +EDITOR junk.py} but the name of your editor and the
file name 'junk.py'.  If your editor is idle, you would have typed

[source, bash]
   > idle junk.py


We can create a file called gibberish.py and fill it with the gibberish
program from above. Make sure you get out of python so you're back at 
the command line ('terminal' or 'console').

[source, bash]
    EDITOR gibberish.py


.Gibberish.py
[source, python]
----
import random

names = [ "Tim", "Jeff", "Bob"]
adjectives = ["huge", "tiny", "hairy"]
parts = [ "feet", "ears", "arms"]

def speak_of(name, material, parts):
    print name + " has " + material + " " + parts + "."

for x in [0,1,3]:
    speak_of(random.choice(names), random.choice(adjectives), random.choice(parts))
----

Save the file and exit the editor.  You should be able to tell python to run the 
gibberish program:

[source, bash]
   > python gibberish.py

If you typed it perfectly, including indentation, then python should reward you
by printing out all the gibberish just like it did in the last chapter. If not, 
you will have to edit the file and fix it.

Python will tell you what kind of error you made (though it might not seem very
obvious to you) and which line of the file has the error. This is to help you
find and correct your errors.

A syntax error means that you typed something that Python can't understand.
It might mean you misspelled a word or got the punctuation wrong.  If you 
write a list with a square bracket +[+ in front but a +}+ at the end, it will
tell you you have a mismatch. If you leave a colon (+:+) off of a loop or 
function, it will be a syntax error. Learn what the errors look like.

Python is special in that it doesn't like you to use tabs sometimes and spaces
other times. It wants everything indented in the same way, even if it looks 
the same to you.  Make sure you have only spaces for indenting, and you will
be fine.  Programming languages are pretty particular about syntax and 
spelling and punctuation (far worse than your 4th grade English teacher).

It is okay if it takes several tries, and even if you get confused or frustrated.
A big part of programming is learning to fight your ways through errors to get
your code to work.

Once you have the code working, you might want to go back and add errors just 
to learn what python tells you when it doesn't understand your cde.  Try one
error, save the file, run python, and then fix the code and try another error.
You don't want to have more than one error, or you might forget how to fix 
the program. Since your goal is to learn right now, it's great to learn how 
things fail and how to fix them.

Make sure your program is working before you continue.

Making a Class For Gibberish Generation
---------------------------------------

There is a lot to do to turn our little functions into a class. 
You might remember from earlier that a class is a kind of machine.
Our little program is a machine, and it uses strings and random
generators, but we can wrap that up as a kind of machine of its
own that we can use to build larger machines yet.

Here's what the class of a gibberish machine might look like:

[source, python]
----
import random

class Gibberish(object):
    names = ["Tim", "Jeff","Bob","Charlene"]
    adjectives = ["huge", "tiny","hairy","wrinkly"]
    parts = ["arms","ears","feet","earrings","knuckles"]

    def speak(self):
        print random.choice(self.names)+ \
              " has "+\
              random.choice(self.adjectives)+ \
              " "+\
              random.choice(self.parts)+ \
              "."

talker = Gibberish()
talker.speak()
----

There are many features here you've not seen before, but lets walk though 
them together.

 * You've imported random before, that's not new at all.

 * The 'class' statement is new, though. It tells python we're creating a class,
not a function or something to run immediately.  

 * In the parenthesis is the name of the class we want to build from. Putting
something inside the class parenthesis is like doing an import into your class.
We call that 'inheritance' because you get everything the other class has. 
We don't want to use that at all right now.

 * When you don't have something you want to import, you can leave the
parentheses empty but the python way is to use 'object'. You can learn more
about inheriting from object, but it's not all that interesting right now.

 * Notice that all the stuff that belongs to the class is indented. Python uses
indented paragraphs as the clue that lines of code belong together.
You can see the lists (names, adjectives, parts) are indented. Also the def
for our speak command is indented. 

 * The print statement would get pretty long if I left it on one line, in fact
it would be too long for this book. I split it by putting a "\" at the end
of the line. It is the _very_ last thing on the line, and has no spaces after
it.  

 * Notice that whenever we wanted to refer to something in Gibberish, we put
*self.* in front of it. This is how the functions in a class (called methods)
have access to the object they live in. If we didn't mention "self." then the
function would look for "names", "adjectives", and "parts" outside of the
class instead of looking inside where they actually belong.

 * If we left off the last paragraph and ran the file with python, it would 
create the Gibberish class and exit without doing anything interesting.
Instead we created a Gibberish object (a machine of the Gibberish class)
and told it to speak. 

As you can see, there is a bit of extra work to building a class. It is
not very hard to do, and we'll show you later how to use a class.

For now, try to change your gibberish file to make a class like we showed
above. Each time you run the program in python, it will say something about
someone and their funny characteristics.


Other kinds of errors:
----------------------

Look at this sentence:
     Eye can sea ewe, sew bee cool.

If you read it out loud, you will know what I meant to say. Individually
the words are all spelled correctly, but the words we spelled don't make sense
in the sentence you read.  Instead of 'eye' it should say 'i', and instead of
'ewe' it should say 'you'.

In programming, we can write a program that looks okay to python's syntax
checker, but can do the wrong thing entirely. The program has what we would
call a 'logical error'.

When there is a syntax error, the program won't run at all. When there is a
logical error, the program runs but fails in a different way such as giving 
the wrong answer.

Computers can't tell good answers from bad answers, and can't understand what
you mean, so you have to do a good job of telling it what you mean.  We need
some way to protect ourselves from logical errors, so we have developed a
really cool technique: unit testing!

In this case "unit" means "some small piece of programming work."  There are
other kinds of tests, and we'll talk about those later on. For now, we should
learn to write small tests.

In order to test we need to learn a few different things.  Let's get started.

[source, bash]
    > EDITOR test_gibberish.py

[source, python]
    > import unittest
    > unittest.main()

Exit the editor, and try this:
[source, bash]
    > python test_gibberish.py

This should work, and should tell you that there were no tests run. This is 
correct, because we didn't write any tests. All we did is make a program that
is capable of running unit tests. 

The first line imports the unittest module. It's a normal kind of import, 
but this time we get unittest instead of random.footnote:[you can read about unittest online or in the library reference]

The last line runs the "main" function of unittest, which tries to find and run 
tests in the file. There are no tests, so it tells you that it did nothing and
it's done.

Let's load it up in the editor and so some more:

.test_gibberish.py
[source, python]
----
import unittest

class TestRandomGenerator(unittest.TestCase):
    def testThatFails(self):
        self.fail("this fails")

unittest.main()
----

Get out of your editor and run the test_gibberish program:

[source, bash]
    python test_gibberish.py

This time it should tell you that you had a failing test:

.An example
    ======================================================================
    FAIL: testThatFails (__main__.TestRandomGenerator)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
    File "<stdin>", line 5, in testThatFails
    AssertionError: this fails
    ----------------------------------------------------------------------
    Ran 1 test in 0.000s
    FAILED (failures=1)
    ======================================================================

This is good news, because we told the test to fail.  There is suddenly a 
lot going on here, so let's break it down a bit.

[source, python]
    import unittest

This brings in all the unit test goodies.

[source, python]
    class TestRandomGenerator(unittest.TestCase):

This has two interesting things happening. 

We're making our second ever class ever!  We could call our test anything we
wanted, but we called it TestRandomGenerator. It seemed like a good idea.

The second interesting bit is after the word 'class', inside parentheses. It is
the name of a class that someone else already built.  The "unittest" module we
imported contains a class named "TestCase" and that class has a bunch of stuff
we want to use.  Just as we imported "unittest" into our file, we are importing
the TestClass into the class we're making.

The next bit created a function, and ours has some interesting features:
[source, python]
        def testThatFails(self):
            self.fail("this fails")

This test is written as a 'method', which is what we call a function that
belongs to an object. This function will be called by the test framework. 

Remember that methods are part of a class, and receive 'self' as a parameter.
It refers to the object the function is a part of, and gives access to all the
other functions and data and stuff in the object. 

In this case the 'fail' method is part of the stuff we get from 'unittest.TestCase'.
It becomes a part of our class through 'inheritance'.

[source, python]
    unittest.main()

This calls the main function of the unittest, which will look through our file
for classes that inherit from 'unittest.TestCase', and will run the methods 
that start with the word "test".  

This gives us a few interesting bits to work from:
 * We can work in files so our programs do not vanish when we close python.
 * We have our class called 'Gibberish' in gibberish.py
 * We have a failing test in 'test_gibberish.py'
 * We have seen methods and classes.
 * We know about imports and inheritance 

That is a lot of stuff to know about, but it is a very good place to start.
Now we can try to learn unit testing.

Bring up this file in your editor:
.test_gibberish.py
[source, python]
----
import unittest

class TestRandomGenerator(unittest.TestCase):
    def testThatFails(self):
        self.fail("this fails")

unittest.main()
----


Let's change the file to have more interesting tests that prove we're
doing a good job. Let's make sure that we're picking a name that is 
really in the name list.

We could look at all the names and see if at least one of them is
in the text we get after doing "talker.speak" but that data is only
printed. We never see that choice.

Whenever we write code without tests, we make the code hard to test.
Code that is hard to test tends not to have tests written for it. It
would be really easy to give up on testing this little class and 
check the results with our own two eyes. That's fine when we do 
no more work than this, but imagine a program with dozens or hundreds
of functions and you can understand that it would be hard to check 
all of our functions by running the programs and checking the results
manually.

Checking the programs by hand becomes more expensive the more programs
you have. The only alternative we have is to use automatic tests to
check our code, but our code needs to make it easy to write these tests.

Let's try to write our code so that testing is easy. The easiest way
to do that is by writing the test first. Delete 'testThatFails' and 
write a test more like this:
[source, python]
----
import unittest
import gibberish

class TestRandomGenerator(unittest.TestCase):
    def testNameIsSelected(self):
        talker = gibberish.Gibberish()
        self.assertTrue(talker.pickName() in talker.names)

unittest.main()
----

Does this make sense? The first change is that we include gibberish 
so that we can use the class we want to test. In our new test, we
creat a Gibberish object and ask if the name it picks with pickName()
is in the list of names it's allowed to use.

The class for gibberish is 'Gibberish', and you see that we used
the name 'gibberish.Gibberish'. This means the class Gibberish from 
the imported module gibberish. The fact that the name is the same 
except for capitalization shouldn't be too confusing. In python and
many other languages, names are sensitive to capitalization so that
Gibberish and gibberish are two different words entirely.

The only thing that doesn't make sense is that there is no such thing
as pickName() in the Gibberish class. If we run the test we get:

.python test_gibberish.py
----
E
======================================================================
ERROR: testNameIsSelected (__main__.TestRandomGenerator)
______________________________________________________________________
Traceback (most recent call last):
  File "test_gibberish.py", line 7, in testNameIsSelected
    self.assertTrue(talker.pickName() in talker.names)
AttributeError: 'Gibberish' object has no attribute 'pickName'
Ran 1 test in 0.000s

FAILED (errors=1)
Charlene has hairy earrings.
----

Oh, look... Charlene has hairy earrings? Why did that show up? We 
know why we got the warning about pickName, but this is a little 
unexpected. 

Pull up gibberish.py again and lets look at it:

.gibberish.py
----
import random

class Gibberish(object):
    names = ["Tim", "Jeff","Bob","Charlene"]
    adjectives = ["huge", "tiny","hairy","wrinkly"]
    parts = ["arms","ears","feet","earrings","knuckles"]

    def speak(self):
        print random.choice(self.names)+ \
              " has "+\
              random.choice(self.adjectives)+ \
              " "+\
              random.choice(self.parts)+ \
              "."

talker = Gibberish()
talker.speak()
----

At the bottom of the file, we create a Gibberish object and have it speak.
What we need is to have a way to only do that if we are being run as a 
program, and not if we're being imported for testing.

The trick for this is kind of weird for a language that is normally 
smart, but we know that we are dealing with the work of other programmers
and they don't have to do things as we like.  Try changing the bottom of
the file like this:

[source, python]
----
if __name__ == "__main__":
    talker = Gibberish()
    talker.speak()
----

Weird, but when the program is run it will have its name set to 
two underlines, the word 'main' and two more underscores. That's 
kind of arbitrary and strange, but reliable. Now when we run the
test it no longer puts a comment at the end.

With that out of the way, we should change our code so that we 
can finally check out if picking names works.

.gibberish.py
[source, python]
----
import random

class Gibberish(object):
    names = ["Tim", "Jeff","Bob","Charlene"]
    adjectives = ["huge", "tiny","hairy","wrinkly"]
    parts = ["arms","ears","feet","earrings","knuckles"]

    def pickName(self):
        return random.choice(self.names)

    def speak(self):
        print self.pickName() + \
              " has "+\
              random.choice(self.adjectives)+ \
              " "+\
              random.choice(self.parts)+ \
              "."

if __name__ == "__main__":
    talker = Gibberish()
    talker.speak()
----

Now we have a pickName function, and it's called from the 
speak method. When we run the tests we get this:

----
.
Ran 1 test in 0.000s

OK
----

This means one test ran, and it passed! Now we know that the names
are chosen correctly. By breaking out the one random choice to a
function that returns the string instead of going straight to printing,
we have made the code a little more testable.



